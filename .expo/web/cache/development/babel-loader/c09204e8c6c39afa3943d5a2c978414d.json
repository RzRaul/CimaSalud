{"ast":null,"code":"var XDate = require('xdate');\n\nvar _require = require(\"./interface\"),\n    parseDate = _require.parseDate;\n\nvar latinNumbersPattern = /[0-9]/g;\nexport function sameMonth(a, b) {\n  return a instanceof XDate && b instanceof XDate && a.getFullYear() === b.getFullYear() && a.getMonth() === b.getMonth();\n}\nexport function sameDate(a, b) {\n  return a instanceof XDate && b instanceof XDate && a.getFullYear() === b.getFullYear() && a.getMonth() === b.getMonth() && a.getDate() === b.getDate();\n}\nexport function sameWeek(d1, d2, firstDayOfWeek) {\n  var weekDates = getWeekDates(d1, firstDayOfWeek, 'yyyy-MM-dd');\n  return weekDates == null ? void 0 : weekDates.includes(d2);\n}\nexport function isToday(day) {\n  return sameDate(XDate(day), XDate.today());\n}\nexport function isGTE(a, b) {\n  return b.diffDays(a) > -1;\n}\nexport function isLTE(a, b) {\n  return a.diffDays(b) > -1;\n}\nexport function formatNumbers(value) {\n  var numbers = XDate.locales[XDate.defaultLocale].numbers;\n  return numbers ? value.toString().replace(latinNumbersPattern, function (char) {\n    return numbers[+char];\n  }) : value;\n}\nexport function fromTo(a, b) {\n  var days = [];\n  var from = +a,\n      to = +b;\n\n  for (; from <= to; from = new XDate(from, true).addDays(1).getTime()) {\n    days.push(new XDate(from, true));\n  }\n\n  return days;\n}\nexport function month(xd) {\n  var year = xd.getFullYear(),\n      month = xd.getMonth();\n  var days = new Date(year, month + 1, 0).getDate();\n  var firstDay = new XDate(year, month, 1, 0, 0, 0, true);\n  var lastDay = new XDate(year, month, days, 0, 0, 0, true);\n  return fromTo(firstDay, lastDay);\n}\nexport function weekDayNames() {\n  var firstDayOfWeek = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 0;\n  var weekDaysNames = XDate.locales[XDate.defaultLocale].dayNamesShort;\n  var dayShift = firstDayOfWeek % 7;\n\n  if (dayShift) {\n    weekDaysNames = weekDaysNames.slice(dayShift).concat(weekDaysNames.slice(0, dayShift));\n  }\n\n  return weekDaysNames;\n}\nexport function page(xd, firstDayOfWeek, showSixWeeks) {\n  var days = month(xd);\n  var before = [],\n      after = [];\n  var fdow = (7 + firstDayOfWeek) % 7 || 7;\n  var ldow = (fdow + 6) % 7;\n  firstDayOfWeek = firstDayOfWeek || 0;\n  var from = days[0].clone();\n  var daysBefore = from.getDay();\n\n  if (from.getDay() !== fdow) {\n    from.addDays(-(from.getDay() + 7 - fdow) % 7);\n  }\n\n  var to = days[days.length - 1].clone();\n  var day = to.getDay();\n\n  if (day !== ldow) {\n    to.addDays((ldow + 7 - day) % 7);\n  }\n\n  var daysForSixWeeks = (daysBefore + days.length) / 6 >= 6;\n\n  if (showSixWeeks && !daysForSixWeeks) {\n    to.addDays(7);\n  }\n\n  if (isLTE(from, days[0])) {\n    before = fromTo(from, days[0]);\n  }\n\n  if (isGTE(to, days[days.length - 1])) {\n    after = fromTo(days[days.length - 1], to);\n  }\n\n  return before.concat(days.slice(1, days.length - 1), after);\n}\nexport function isDateNotInTheRange(minDate, maxDate, date) {\n  return minDate && !isGTE(date, minDate) || maxDate && !isLTE(date, maxDate);\n}\nexport function getWeekDates(date, firstDay, format) {\n  if (date && parseDate(date).valid()) {\n    var current = parseDate(date);\n    var daysArray = [current];\n    var dayOfTheWeek = current.getDay() - firstDay;\n\n    if (dayOfTheWeek < 0) {\n      dayOfTheWeek = 7 + dayOfTheWeek;\n    }\n\n    var newDate = current;\n    var index = dayOfTheWeek - 1;\n\n    while (index >= 0) {\n      newDate = parseDate(newDate).addDays(-1);\n      daysArray.unshift(newDate);\n      index -= 1;\n    }\n\n    newDate = current;\n    index = dayOfTheWeek + 1;\n\n    while (index < 7) {\n      newDate = parseDate(newDate).addDays(1);\n      daysArray.push(newDate);\n      index += 1;\n    }\n\n    if (format) {\n      return daysArray.map(function (d) {\n        return d.toString(format);\n      });\n    }\n\n    return daysArray;\n  }\n}","map":{"version":3,"sources":["C:/Users/adlai/Desktop/IngProc/CimaHealth/node_modules/react-native-calendars/src/dateutils.js"],"names":["XDate","require","parseDate","latinNumbersPattern","sameMonth","a","b","getFullYear","getMonth","sameDate","getDate","sameWeek","d1","d2","firstDayOfWeek","weekDates","getWeekDates","includes","isToday","day","today","isGTE","diffDays","isLTE","formatNumbers","value","numbers","locales","defaultLocale","toString","replace","char","fromTo","days","from","to","addDays","getTime","push","month","xd","year","Date","firstDay","lastDay","weekDayNames","weekDaysNames","dayNamesShort","dayShift","slice","concat","page","showSixWeeks","before","after","fdow","ldow","clone","daysBefore","getDay","length","daysForSixWeeks","isDateNotInTheRange","minDate","maxDate","date","format","valid","current","daysArray","dayOfTheWeek","newDate","index","unshift","map","d"],"mappings":"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","sourcesContent":["const XDate = require('xdate');\nconst {parseDate} = require('./interface');\n\nconst latinNumbersPattern = /[0-9]/g;\n\nexport function sameMonth(a, b) {\n  return (\n    a instanceof XDate && b instanceof XDate && a.getFullYear() === b.getFullYear() && a.getMonth() === b.getMonth()\n  );\n}\n\nexport function sameDate(a, b) {\n  return (\n    a instanceof XDate &&\n    b instanceof XDate &&\n    a.getFullYear() === b.getFullYear() &&\n    a.getMonth() === b.getMonth() &&\n    a.getDate() === b.getDate()\n  );\n}\n\nexport function sameWeek(d1, d2, firstDayOfWeek) {\n  const weekDates = getWeekDates(d1, firstDayOfWeek, 'yyyy-MM-dd');\n  return weekDates?.includes(d2);\n}\n\nexport function isToday(day) {\n  return sameDate(XDate(day), XDate.today());\n}\n\nexport function isGTE(a, b) {\n  return b.diffDays(a) > -1;\n}\n\nexport function isLTE(a, b) {\n  return a.diffDays(b) > -1;\n}\n\nexport function formatNumbers(value) {\n  const numbers = XDate.locales[XDate.defaultLocale].numbers;\n  return numbers ? value.toString().replace(latinNumbersPattern, char => numbers[+char]) : value;\n}\n\nexport function fromTo(a, b) {\n  const days = [];\n  let from = +a,\n    to = +b;\n  for (; from <= to; from = new XDate(from, true).addDays(1).getTime()) {\n    days.push(new XDate(from, true));\n  }\n  return days;\n}\n\nexport function month(xd) {\n  const year = xd.getFullYear(),\n    month = xd.getMonth();\n  const days = new Date(year, month + 1, 0).getDate();\n\n  const firstDay = new XDate(year, month, 1, 0, 0, 0, true);\n  const lastDay = new XDate(year, month, days, 0, 0, 0, true);\n\n  return fromTo(firstDay, lastDay);\n}\n\nexport function weekDayNames(firstDayOfWeek = 0) {\n  let weekDaysNames = XDate.locales[XDate.defaultLocale].dayNamesShort;\n  const dayShift = firstDayOfWeek % 7;\n  if (dayShift) {\n    weekDaysNames = weekDaysNames.slice(dayShift).concat(weekDaysNames.slice(0, dayShift));\n  }\n  return weekDaysNames;\n}\n\nexport function page(xd, firstDayOfWeek, showSixWeeks) {\n  const days = month(xd);\n  let before = [],\n    after = [];\n\n  const fdow = (7 + firstDayOfWeek) % 7 || 7;\n  const ldow = (fdow + 6) % 7;\n\n  firstDayOfWeek = firstDayOfWeek || 0;\n\n  const from = days[0].clone();\n  const daysBefore = from.getDay();\n\n  if (from.getDay() !== fdow) {\n    from.addDays(-(from.getDay() + 7 - fdow) % 7);\n  }\n\n  const to = days[days.length - 1].clone();\n  const day = to.getDay();\n  if (day !== ldow) {\n    to.addDays((ldow + 7 - day) % 7);\n  }\n\n  const daysForSixWeeks = (daysBefore + days.length) / 6 >= 6;\n\n  if (showSixWeeks && !daysForSixWeeks) {\n    to.addDays(7);\n  }\n\n  if (isLTE(from, days[0])) {\n    before = fromTo(from, days[0]);\n  }\n\n  if (isGTE(to, days[days.length - 1])) {\n    after = fromTo(days[days.length - 1], to);\n  }\n\n  return before.concat(days.slice(1, days.length - 1), after);\n}\n\nexport function isDateNotInTheRange(minDate, maxDate, date) {\n  return (minDate && !isGTE(date, minDate)) || (maxDate && !isLTE(date, maxDate));\n}\n\nexport function getWeekDates(date, firstDay, format) {\n  if (date && parseDate(date).valid()) {\n    const current = parseDate(date);\n    const daysArray = [current];\n    let dayOfTheWeek = current.getDay() - firstDay;\n    if (dayOfTheWeek < 0) {\n      // to handle firstDay > 0\n      dayOfTheWeek = 7 + dayOfTheWeek;\n    }\n\n    let newDate = current;\n    let index = dayOfTheWeek - 1;\n    while (index >= 0) {\n      newDate = parseDate(newDate).addDays(-1);\n      daysArray.unshift(newDate);\n      index -= 1;\n    }\n\n    newDate = current;\n    index = dayOfTheWeek + 1;\n    while (index < 7) {\n      newDate = parseDate(newDate).addDays(1);\n      daysArray.push(newDate);\n      index += 1;\n    }\n\n    if (format) {\n      return daysArray.map(d => d.toString(format));\n    }\n\n    return daysArray;\n  }\n}\n"]},"metadata":{},"sourceType":"module"}