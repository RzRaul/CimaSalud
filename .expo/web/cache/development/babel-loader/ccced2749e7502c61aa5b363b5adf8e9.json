{"ast":null,"code":"var XDate = require('xdate');\n\nfunction padNumber(n) {\n  if (n < 10) {\n    return '0' + n;\n  }\n\n  return n;\n}\n\nfunction xdateToData(d) {\n  var dateString = toMarkingFormat(d);\n  return {\n    year: d.getFullYear(),\n    month: d.getMonth() + 1,\n    day: d.getDate(),\n    timestamp: XDate(dateString, true).getTime(),\n    dateString: dateString\n  };\n}\n\nfunction parseDate(d) {\n  if (!d) {\n    return;\n  } else if (d.timestamp) {\n    return XDate(d.timestamp, true);\n  } else if (d instanceof XDate) {\n    return XDate(toMarkingFormat(d), true);\n  } else if (d.getTime) {\n    var dateString = d.getFullYear() + '-' + padNumber(d.getMonth() + 1) + '-' + padNumber(d.getDate());\n    return XDate(dateString, true);\n  } else if (d.year) {\n    var _dateString = d.year + '-' + padNumber(d.month) + '-' + padNumber(d.day);\n\n    return XDate(_dateString, true);\n  } else if (d) {\n    return XDate(d, true);\n  }\n}\n\nfunction toMarkingFormat(d) {\n  return d instanceof XDate && d.toString('yyyy-MM-dd');\n}\n\nmodule.exports = {\n  xdateToData: xdateToData,\n  parseDate: parseDate,\n  toMarkingFormat: toMarkingFormat\n};","map":{"version":3,"sources":["C:/Users/adlai/Desktop/IngProc/CimaHealth/node_modules/react-native-calendars/src/interface.js"],"names":["XDate","require","padNumber","n","xdateToData","d","dateString","toMarkingFormat","year","getFullYear","month","getMonth","day","getDate","timestamp","getTime","parseDate","toString","module","exports"],"mappings":"AAAA,IAAMA,KAAK,GAAGC,OAAO,CAAC,OAAD,CAArB;;AAEA,SAASC,SAAT,CAAmBC,CAAnB,EAAsB;AACpB,MAAIA,CAAC,GAAG,EAAR,EAAY;AACV,WAAO,MAAMA,CAAb;AACD;;AACD,SAAOA,CAAP;AACD;;AAED,SAASC,WAAT,CAAqBC,CAArB,EAAwB;AACtB,MAAMC,UAAU,GAAGC,eAAe,CAACF,CAAD,CAAlC;AACA,SAAO;AACLG,IAAAA,IAAI,EAAEH,CAAC,CAACI,WAAF,EADD;AAELC,IAAAA,KAAK,EAAEL,CAAC,CAACM,QAAF,KAAe,CAFjB;AAGLC,IAAAA,GAAG,EAAEP,CAAC,CAACQ,OAAF,EAHA;AAILC,IAAAA,SAAS,EAAEd,KAAK,CAACM,UAAD,EAAa,IAAb,CAAL,CAAwBS,OAAxB,EAJN;AAKLT,IAAAA,UAAU,EAAEA;AALP,GAAP;AAOD;;AAED,SAASU,SAAT,CAAmBX,CAAnB,EAAsB;AACpB,MAAI,CAACA,CAAL,EAAQ;AACN;AACD,GAFD,MAEO,IAAIA,CAAC,CAACS,SAAN,EAAiB;AAEtB,WAAOd,KAAK,CAACK,CAAC,CAACS,SAAH,EAAc,IAAd,CAAZ;AACD,GAHM,MAGA,IAAIT,CAAC,YAAYL,KAAjB,EAAwB;AAE7B,WAAOA,KAAK,CAACO,eAAe,CAACF,CAAD,CAAhB,EAAqB,IAArB,CAAZ;AACD,GAHM,MAGA,IAAIA,CAAC,CAACU,OAAN,EAAe;AAEpB,QAAMT,UAAU,GAAGD,CAAC,CAACI,WAAF,KAAkB,GAAlB,GAAwBP,SAAS,CAACG,CAAC,CAACM,QAAF,KAAe,CAAhB,CAAjC,GAAsD,GAAtD,GAA4DT,SAAS,CAACG,CAAC,CAACQ,OAAF,EAAD,CAAxF;AACA,WAAOb,KAAK,CAACM,UAAD,EAAa,IAAb,CAAZ;AACD,GAJM,MAIA,IAAID,CAAC,CAACG,IAAN,EAAY;AACjB,QAAMF,WAAU,GAAGD,CAAC,CAACG,IAAF,GAAS,GAAT,GAAeN,SAAS,CAACG,CAAC,CAACK,KAAH,CAAxB,GAAoC,GAApC,GAA0CR,SAAS,CAACG,CAAC,CAACO,GAAH,CAAtE;;AACA,WAAOZ,KAAK,CAACM,WAAD,EAAa,IAAb,CAAZ;AACD,GAHM,MAGA,IAAID,CAAJ,EAAO;AAEZ,WAAOL,KAAK,CAACK,CAAD,EAAI,IAAJ,CAAZ;AACD;AACF;;AAED,SAASE,eAAT,CAAyBF,CAAzB,EAA4B;AAC1B,SAAOA,CAAC,YAAYL,KAAb,IAAsBK,CAAC,CAACY,QAAF,CAAW,YAAX,CAA7B;AACD;;AAEDC,MAAM,CAACC,OAAP,GAAiB;AACff,EAAAA,WAAW,EAAXA,WADe;AAEfY,EAAAA,SAAS,EAATA,SAFe;AAGfT,EAAAA,eAAe,EAAfA;AAHe,CAAjB","sourcesContent":["const XDate = require('xdate');\n\nfunction padNumber(n) {\n  if (n < 10) {\n    return '0' + n;\n  }\n  return n;\n}\n\nfunction xdateToData(d) {\n  const dateString = toMarkingFormat(d);\n  return {\n    year: d.getFullYear(),\n    month: d.getMonth() + 1,\n    day: d.getDate(),\n    timestamp: XDate(dateString, true).getTime(),\n    dateString: dateString\n  };\n}\n\nfunction parseDate(d) {\n  if (!d) {\n    return;\n  } else if (d.timestamp) {\n    // conventional data timestamp\n    return XDate(d.timestamp, true);\n  } else if (d instanceof XDate) {\n    // xdate\n    return XDate(toMarkingFormat(d), true);\n  } else if (d.getTime) {\n    // javascript date\n    const dateString = d.getFullYear() + '-' + padNumber(d.getMonth() + 1) + '-' + padNumber(d.getDate());\n    return XDate(dateString, true);\n  } else if (d.year) {\n    const dateString = d.year + '-' + padNumber(d.month) + '-' + padNumber(d.day);\n    return XDate(dateString, true);\n  } else if (d) {\n    // timestamp number or date formatted as string\n    return XDate(d, true);\n  }\n}\n\nfunction toMarkingFormat(d) {\n  return d instanceof XDate && d.toString('yyyy-MM-dd');\n}\n\nmodule.exports = {\n  xdateToData,\n  parseDate,\n  toMarkingFormat\n};\n"]},"metadata":{},"sourceType":"script"}