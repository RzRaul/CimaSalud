{"ast":null,"code":"import _defineProperty from \"@babel/runtime/helpers/defineProperty\";\nimport _extends from \"@babel/runtime/helpers/extends\";\nimport _classCallCheck from \"@babel/runtime/helpers/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/createClass\";\nimport _inherits from \"@babel/runtime/helpers/inherits\";\nimport _possibleConstructorReturn from \"@babel/runtime/helpers/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime/helpers/getPrototypeOf\";\nvar _jsxFileName = \"C:\\\\Users\\\\adlai\\\\Desktop\\\\IngProc\\\\CimaHealth\\\\node_modules\\\\react-native-calendars\\\\src\\\\calendar\\\\day\\\\index.js\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) { symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); } keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }\n\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }\n\nimport get from 'lodash/get';\nimport omit from 'lodash/omit';\nimport PropTypes from 'prop-types';\nimport XDate from 'xdate';\nimport memoize from 'memoize-one';\nimport React, { Component } from 'react';\nimport { shouldUpdate } from \"../../component-updater\";\nimport { formatNumbers, isToday as dateutils_isToday } from \"../../dateutils\";\nimport { xdateToData } from \"../../interface\";\nimport { SELECT_DATE_SLOT } from \"../../testIDs\";\nimport BasicDay from \"./basic\";\nimport PeriodDay from \"./period\";\nvar basicDayPropsTypes = omit(BasicDay.propTypes, 'date');\n\nvar Day = function (_Component) {\n  _inherits(Day, _Component);\n\n  var _super = _createSuper(Day);\n\n  function Day() {\n    var _this;\n\n    _classCallCheck(this, Day);\n\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    _this = _super.call.apply(_super, [this].concat(args));\n    _this.getAccessibilityLabel = memoize(function (day, marking, isToday) {\n      var today = get(XDate, 'locales[XDate.defaultLocale].today');\n      var formatAccessibilityLabel = get(XDate, 'locales[XDate.defaultLocale].formatAccessibilityLabel');\n\n      var markingLabel = _this.getMarkingLabel(marking);\n\n      if (formatAccessibilityLabel) {\n        return (isToday ? today : '') + \" \" + day.toString(formatAccessibilityLabel) + \" \" + markingLabel;\n      }\n\n      return (isToday ? 'today' : '') + \" \" + day.toString('dddd d MMMM yyyy') + \" \" + markingLabel;\n    });\n    return _this;\n  }\n\n  _createClass(Day, [{\n    key: \"shouldComponentUpdate\",\n    value: function shouldComponentUpdate(nextProps) {\n      return shouldUpdate(this.props, nextProps, ['day', 'dayComponent', 'state', 'markingType', 'marking', 'onPress', 'onLongPress']);\n    }\n  }, {\n    key: \"getMarkingLabel\",\n    value: function getMarkingLabel(marking) {\n      var label = '';\n\n      if (marking) {\n        if (marking.accessibilityLabel) {\n          return marking.accessibilityLabel;\n        }\n\n        if (marking.selected) {\n          label += 'selected ';\n\n          if (!marking.marked) {\n            label += 'You have no entries for this day ';\n          }\n        }\n\n        if (marking.marked) {\n          label += 'You have entries for this day ';\n        }\n\n        if (marking.startingDay) {\n          label += 'period start ';\n        }\n\n        if (marking.endingDay) {\n          label += 'period end ';\n        }\n\n        if (marking.disabled || marking.disableTouchEvent) {\n          label += 'disabled ';\n        }\n      }\n\n      return label;\n    }\n  }, {\n    key: \"getDayComponent\",\n    value: function getDayComponent() {\n      var _this$props = this.props,\n          dayComponent = _this$props.dayComponent,\n          markingType = _this$props.markingType;\n\n      if (dayComponent) {\n        return dayComponent;\n      }\n\n      return markingType === 'period' ? PeriodDay : BasicDay;\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this$props2 = this.props,\n          day = _this$props2.day,\n          marking = _this$props2.marking;\n      var date = xdateToData(day);\n      var isToday = dateutils_isToday(day);\n      var Component = this.getDayComponent();\n      var dayProps = omit(this.props, 'day');\n      var accessibilityLabel = this.getAccessibilityLabel(day, marking, isToday);\n      return React.createElement(Component, _extends({}, dayProps, {\n        date: date,\n        testID: SELECT_DATE_SLOT + \"-\" + date.dateString,\n        accessibilityLabel: accessibilityLabel,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 88,\n          columnNumber: 17\n        }\n      }), formatNumbers(date ? day == null ? void 0 : day.getDate() : day));\n    }\n  }]);\n\n  return Day;\n}(Component);\n\nDay.displayName = 'IGNORE';\nDay.propTypes = _objectSpread(_objectSpread({}, basicDayPropsTypes), {}, {\n  day: PropTypes.object,\n  dayComponent: PropTypes.any\n});\nexport { Day as default };","map":{"version":3,"sources":["C:/Users/adlai/Desktop/IngProc/CimaHealth/node_modules/react-native-calendars/src/calendar/day/index.js"],"names":["get","omit","PropTypes","XDate","memoize","React","Component","shouldUpdate","formatNumbers","isToday","dateutils_isToday","xdateToData","SELECT_DATE_SLOT","BasicDay","PeriodDay","basicDayPropsTypes","propTypes","Day","getAccessibilityLabel","day","marking","today","formatAccessibilityLabel","markingLabel","getMarkingLabel","toString","nextProps","props","label","accessibilityLabel","selected","marked","startingDay","endingDay","disabled","disableTouchEvent","dayComponent","markingType","date","getDayComponent","dayProps","dateString","getDate","displayName","object","any"],"mappings":"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","sourcesContent":["import get from 'lodash/get';\nimport omit from 'lodash/omit';\nimport PropTypes from 'prop-types';\nimport XDate from 'xdate';\nimport memoize from 'memoize-one';\nimport React, { Component } from 'react';\n// @ts-expect-error\nimport { shouldUpdate } from '../../component-updater';\n// @ts-expect-error\nimport { formatNumbers, isToday as dateutils_isToday } from '../../dateutils';\n// @ts-expect-error\nimport { xdateToData } from '../../interface';\n// @ts-expect-error\nimport { SELECT_DATE_SLOT } from '../../testIDs';\nimport BasicDay from './basic';\nimport PeriodDay from './period';\nconst basicDayPropsTypes = omit(BasicDay.propTypes, 'date');\nexport default class Day extends Component {\n    static displayName = 'IGNORE';\n    static propTypes = {\n        ...basicDayPropsTypes,\n        /** The day to render */\n        day: PropTypes.object,\n        /** Provide custom day rendering component */\n        dayComponent: PropTypes.any\n    };\n    shouldComponentUpdate(nextProps) {\n        return shouldUpdate(this.props, nextProps, [\n            'day',\n            'dayComponent',\n            'state',\n            'markingType',\n            'marking',\n            'onPress',\n            'onLongPress'\n        ]);\n    }\n    getMarkingLabel(marking) {\n        let label = '';\n        if (marking) {\n            if (marking.accessibilityLabel) {\n                return marking.accessibilityLabel;\n            }\n            if (marking.selected) {\n                label += 'selected ';\n                if (!marking.marked) {\n                    label += 'You have no entries for this day ';\n                }\n            }\n            if (marking.marked) {\n                label += 'You have entries for this day ';\n            }\n            if (marking.startingDay) {\n                label += 'period start ';\n            }\n            if (marking.endingDay) {\n                label += 'period end ';\n            }\n            if (marking.disabled || marking.disableTouchEvent) {\n                label += 'disabled ';\n            }\n        }\n        return label;\n    }\n    getAccessibilityLabel = memoize((day, marking, isToday) => {\n        const today = get(XDate, 'locales[XDate.defaultLocale].today');\n        const formatAccessibilityLabel = get(XDate, 'locales[XDate.defaultLocale].formatAccessibilityLabel');\n        const markingLabel = this.getMarkingLabel(marking);\n        if (formatAccessibilityLabel) {\n            return `${isToday ? today : ''} ${day.toString(formatAccessibilityLabel)} ${markingLabel}`;\n        }\n        return `${isToday ? 'today' : ''} ${day.toString('dddd d MMMM yyyy')} ${markingLabel}`;\n    });\n    getDayComponent() {\n        const { dayComponent, markingType } = this.props;\n        if (dayComponent) {\n            return dayComponent;\n        }\n        return markingType === 'period' ? PeriodDay : BasicDay;\n    }\n    render() {\n        const { day, marking } = this.props;\n        const date = xdateToData(day);\n        const isToday = dateutils_isToday(day);\n        const Component = this.getDayComponent();\n        const dayProps = omit(this.props, 'day');\n        const accessibilityLabel = this.getAccessibilityLabel(day, marking, isToday);\n        return (<Component {...dayProps} date={date} testID={`${SELECT_DATE_SLOT}-${date.dateString}`} accessibilityLabel={accessibilityLabel}>\n        {formatNumbers(date ? day?.getDate() : day)}\n      </Component>);\n    }\n}\n"]},"metadata":{},"sourceType":"module"}